package utils

import (
	"fmt"
	"github.com/shopspring/decimal"
	"time"
)

//type ChargePeriod struct {
//	StartPeriod int64   `json:"start_period"`
//	EndPeriod   int64   `json:"end_period"`
//	Start       string  `json:"start"`
//	End         string  `json:"end"`
//	Price       float64 `json:"price"`
//}

type OffsetTimeCharging struct {
	periods         map[int64]ChargePeriod
	chargingMode    int64
	cycleMinute     int64
	offsetStartDate time.Time
	offsetEndDate   time.Time
	//startDiffDuration     int64     // 开始时段相差 分钟
	//endDiffDuration       int64     // 结束时段相差 分钟
	//startDiffTime         string    // 开始差集时间
	//endDiffTime           string    // 结束差集时间
	//startDiffTimeDivision string    // 开始差集时段
	//endDiffTimeDivision   string    // 结束差集时段
	//markStartTime         time.Time // 标记计费开始时间
	//markEndTime           time.Time // 标记计费结束时间
}

//
//type periodTimes struct {
//	StartTime time.Time `json:"start_time"`
//	EndTime   time.Time `json:"end_time"`
//	Index     int       `json:"index"`
//	Start     string    `json:"start"`
//	End       string    `json:"end"`
//	Price     float64   `json:"price"`
//}
//
//type PeriodList struct {
//	StartTime  string  `json:"start_time"`
//	EndTime    string  `json:"end_time"`
//	Index      int     `json:"index"`
//	Duration   int64   `json:"duration"`
//	Start      string  `json:"start"`
//	End        string  `json:"end"`
//	Price      float64 `json:"price"`
//	TotalPrice float64 `json:"total_price"`
//}

func NewOffsetTimeCharge(periods map[int64]ChargePeriod, chargingMode int64, cycleMinute int64) *OffsetTimeCharging {
	return &OffsetTimeCharging{periods: periods, chargingMode: chargingMode, cycleMinute: cycleMinute}
}

// 计费
func (l *OffsetTimeCharging) Outlay(startDate, endDate, offsetStartDate, offsetEndDate string) (float64, map[int64]float64, []*PeriodList) {
	l.offsetStartDate, _ = time.ParseInLocation("2006-01-02 15:04", offsetStartDate, time.Local) // 抵扣开始时间
	l.offsetEndDate, _ = time.ParseInLocation("2006-01-02 15:04", offsetEndDate, time.Local)     // 抵扣结束时间

	var price float64
	periodList := make([]*PeriodList, 0)
	periods := make(map[int64]float64) // 时段费用详情
	startDateTime, _ := time.ParseInLocation("2006-01-02 15:04", startDate, time.Local)
	endDateTime, _ := time.ParseInLocation("2006-01-02 15:04", endDate, time.Local)
	currentTime, _ := time.ParseInLocation("2006-01-02 15:04", startDate, time.Local)

	startDateYMD := startDateTime.Format("2006-01-02")
	endDateYMD := endDateTime.Format("2006-01-02")
	k := 0
	times := make([]periodTimes, 0)
	count := len(l.periods)
	for {
		if currentTime.Unix() >= endDateTime.Unix() {
			break
		}
		var periodStartTime time.Time
		var periodEndTime time.Time
		for i := 0; i < count; i++ {
			if period, ok := l.periods[int64(i)]; ok {
				// 隔日跨日
				if period.Start > period.End && startDateYMD != endDateYMD {
					// 当日跨日
					periodStartTime, _ = time.ParseInLocation("2006-01-02 15:04", fmt.Sprintf("%s %s", currentTime.Format("2006-01-02"), period.Start), time.Local)
					if currentTime.Unix() < periodStartTime.Unix() {
						periodStartTime, _ = time.ParseInLocation("2006-01-02 15:04", fmt.Sprintf("%s %s", time.Unix(currentTime.Unix()-86400, 0).Format("2006-01-02"), period.Start), time.Local)
						periodEndTime, _ = time.ParseInLocation("2006-01-02 15:04", fmt.Sprintf("%s %s", currentTime.Format("2006-01-02"), period.End), time.Local)
					} else {
						periodStartTime, _ = time.ParseInLocation("2006-01-02 15:04", fmt.Sprintf("%s %s", currentTime.Format("2006-01-02"), period.Start), time.Local)
						periodEndTime, _ = time.ParseInLocation("2006-01-02 15:04", fmt.Sprintf("%s %s", time.Unix(currentTime.Unix()+86400, 0).Format("2006-01-02"), period.End), time.Local)
					}

				}
				// 当日
				if period.Start > period.End && startDateYMD == endDateYMD && k == 0 {
					if startDateTime.Format("15:04") > period.Start {
						periodStartTime, _ = time.ParseInLocation("2006-01-02 15:04", fmt.Sprintf("%s %s", currentTime.Format("2006-01-02"), period.Start), time.Local)
						periodEndTime = endDateTime
					} else {
						periodStartTime, _ = time.ParseInLocation("2006-01-02 15:04", fmt.Sprintf("%s %s", time.Unix(currentTime.Unix()-86400, 0).Format("2006-01-02"), period.Start), time.Local)
						periodEndTime, _ = time.ParseInLocation("2006-01-02 15:04", fmt.Sprintf("%s %s", currentTime.Format("2006-01-02"), period.End), time.Local)
					}
					k++
				}

				// 判断 时段结束时间大于时段开始时间
				if period.Start < period.End {
					periodStartTime, _ = time.ParseInLocation("2006-01-02 15:04", fmt.Sprintf("%s %s", currentTime.Format("2006-01-02"), period.Start), time.Local)
					periodEndTime, _ = time.ParseInLocation("2006-01-02 15:04", fmt.Sprintf("%s %s", currentTime.Format("2006-01-02"), period.End), time.Local)
					//fmt.Println("....", periodStartTime.Format(time.DateTime), periodEndTime.Format(time.DateTime))
				}

				if currentTime.Unix() >= periodStartTime.Unix() && currentTime.Unix() <= periodEndTime.Unix() {
					if currentTime.Unix() < periodEndTime.Unix() && periodEndTime.Unix() < endDateTime.Unix() {
						times = append(times, periodTimes{StartTime: currentTime, EndTime: periodEndTime, Index: i, Start: period.Start, End: period.End, Price: period.Price})
					}
					// 判断时段结束时间 大于 传入的结束时间 则赋值且跳出
					if endDateTime.Unix() <= periodEndTime.Unix() {
						times = append(times, periodTimes{StartTime: currentTime, EndTime: endDateTime, Index: i, Start: period.Start, End: period.End, Price: period.Price})
						currentTime = endDateTime
						break
					}
					end := 1
					if currentTime.Unix() == periodEndTime.Unix() && periodEndTime.Unix() < endDateTime.Unix() {
						if periodV, ok := l.periods[int64(i+1)]; ok {
							nextPeriodStartTime, _ := time.ParseInLocation("2006-01-02 15:04", fmt.Sprintf("%s %s", currentTime.Format("2006-01-02"), periodV.Start), time.Local)
							if nextPeriodStartTime.Unix() >= periodEndTime.Unix() && nextPeriodStartTime.Unix() < endDateTime.Unix() {
								end = 0
							}
						} else if periodV, ok := l.periods[0]; ok {
							nextPeriodStartTime, _ := time.ParseInLocation("2006-01-02 15:04", fmt.Sprintf("%s %s", currentTime.Format("2006-01-02"), periodV.Start), time.Local)
							if nextPeriodStartTime.Unix() >= periodEndTime.Unix() && nextPeriodStartTime.Unix() < endDateTime.Unix() {
								end = 0
							}
						}
					}

					if currentTime.Unix() == periodEndTime.Unix() && periodEndTime.Unix() < endDateTime.Unix() {
						if end == 1 {
							times = append(times, periodTimes{StartTime: currentTime, EndTime: endDateTime, Index: i, Start: period.Start, End: period.End, Price: period.Price})
							currentTime = endDateTime
						} else if currentTime.Unix() != periodEndTime.Unix() {
							times = append(times, periodTimes{StartTime: currentTime, EndTime: periodEndTime, Index: i, Start: period.Start, End: period.End, Price: period.Price})
							currentTime = periodEndTime
						}
						continue
					}
					currentTime = periodEndTime
				}
			}
		}
	}
	//fmt.Println(times, "======")
	// 1按分钟计费
	if l.chargingMode == 1 {
		price, _, periods, periodList = l.computeMinute(times)
	}
	// 2按半小时计费
	if l.chargingMode == 2 {
		price, _, periods, periodList = l.computeHalfHour(times)
	}
	// 3按小时计费
	if l.chargingMode == 3 {
		price, periods, periodList = l.computeHour(times)
	}
	// 4按半小时计费开台不足半小时按半小时计费，超过半小时按分钟计费
	if l.chargingMode == 4 {
		price, periods, periodList = l.computeHalfHourOrMinute(times)
	}
	// 5按小时计费开台不足1小时按小时计费，超过1小时按分钟计费
	if l.chargingMode == 5 {
		price, periods, periodList = l.computeHourOrMinute(times)
	}
	// 6以10分钟作为一个收费周期，第1分钟后开始计费
	if l.chargingMode == 6 {
		price, periods, periodList = l.computeCycleAndMinute(times)
	}
	return price, periods, periodList
}

// 分钟计费
func (l *OffsetTimeCharging) computeMinute(times []periodTimes) (float64, float64, map[int64]float64, []*PeriodList) {
	periods := make(map[int64]float64) // 时段费用详情
	var price float64
	var offsetPrice float64
	periodList := make([]*PeriodList, 0)
	lists := make([]offPeriodTimes, 0)
	for _, timeV := range times {
		//fmt.Println(timeV.StartTime.Format(time.DateTime), timeV.EndTime.Format(time.DateTime), l.offsetStartDate.Format(time.DateTime), l.offsetEndDate.Format(time.DateTime))
		if l.offsetStartDate.Unix() >= timeV.StartTime.Unix() && l.offsetStartDate.Unix() <= timeV.EndTime.Unix() {
			totalDuration := timeV.EndTime.Sub(timeV.StartTime)
			var durationED time.Duration
			var offset int64
			if l.offsetEndDate.Unix() < timeV.EndTime.Unix() {
				durationED = l.offsetEndDate.Sub(l.offsetStartDate)
				if durationED.Minutes() >= 1 {
					offset = int64(durationED.Minutes())
				}
			} else {
				durationED = timeV.EndTime.Sub(l.offsetStartDate)
				if durationED.Minutes() >= 1 {
					offset = int64(durationED.Minutes())
				}
			}
			lists = append(lists, offPeriodTimes{Index: timeV.Index, Price: timeV.Price, Duration: int64(totalDuration.Minutes()), Offset: offset})
			l.offsetStartDate = timeV.EndTime
		} else {
			totalDuration := timeV.EndTime.Sub(timeV.StartTime)
			lists = append(lists, offPeriodTimes{Index: timeV.Index, Price: timeV.Price, Duration: int64(totalDuration.Minutes()), Offset: 0})
		}
	}
	for _, list := range lists {
		duration := list.Duration - list.Offset
		minutePrice, _ := decimal.NewFromFloat(list.Price).Div(decimal.NewFromInt(60)).Float64()
		totalPrice, _ := decimal.NewFromInt(duration).Mul(decimal.NewFromFloat(minutePrice)).Float64()
		offsetTotalPrice, _ := decimal.NewFromInt(list.Offset).Mul(decimal.NewFromFloat(minutePrice)).Float64()
		price += totalPrice
		offsetPrice += offsetTotalPrice
	}
	price, _ = decimal.NewFromFloat(price).RoundFloor(2).Float64()
	offsetPrice, _ = decimal.NewFromFloat(offsetPrice).RoundFloor(2).Float64()
	return price, offsetPrice, periods, periodList
}

// 半小时计费 (半小时为节点，以半小时起始点计算价格，如果时间段内计算时长小于半小时，则累计至下个时段，
// 并在下个时段内扣除上个时段少于的时间[因为以收半个时段价格]，然后在计算下周期时段价格，依次类推)
// 如果收费时段内如未满足半小时则按分钟计费算
func (l *OffsetTimeCharging) computeHalfHour(times []periodTimes) (float64, float64, map[int64]float64, []*PeriodList) {
	periods := make(map[int64]float64) // 时段费用详情
	var price float64
	var offsetPrice float64
	periodList := make([]*PeriodList, 0)
	lists := make([]offPeriodTimes, 0)
	for _, timeV := range times {
		//fmt.Println(timeV.StartTime.Format(time.DateTime), timeV.EndTime.Format(time.DateTime), l.offsetStartDate.Format(time.DateTime), l.offsetEndDate.Format(time.DateTime))
		if l.offsetStartDate.Unix() >= timeV.StartTime.Unix() && l.offsetStartDate.Unix() <= timeV.EndTime.Unix() {
			totalDuration := timeV.EndTime.Sub(timeV.StartTime)
			var durationED time.Duration
			var offset int64
			if l.offsetEndDate.Unix() < timeV.EndTime.Unix() {
				durationED = l.offsetEndDate.Sub(l.offsetStartDate)
				if durationED.Minutes() >= 1 {
					offset = int64(durationED.Minutes())
				}
			} else {
				durationED = timeV.EndTime.Sub(l.offsetStartDate)
				if durationED.Minutes() >= 1 {
					offset = int64(durationED.Minutes())
				}
			}
			lists = append(lists, offPeriodTimes{Index: timeV.Index, Price: timeV.Price, Duration: int64(totalDuration.Minutes()), Offset: offset})
			l.offsetStartDate = timeV.EndTime
		} else {
			totalDuration := timeV.EndTime.Sub(timeV.StartTime)
			lists = append(lists, offPeriodTimes{Index: timeV.Index, Price: timeV.Price, Duration: int64(totalDuration.Minutes()), Offset: 0})
		}
	}
	fmt.Println(lists)
	var lastDiffMinute int64
	for _, list := range lists {
		//duration := list.Duration - list.Offset
		haltHour := decimal.NewFromInt(list.Duration).Div(decimal.NewFromInt(30)).Ceil().IntPart()
		maxMinute := decimal.NewFromInt(haltHour).Mul(decimal.NewFromInt(30)).IntPart()
		offsetHaltHour := decimal.NewFromInt(list.Offset).Div(decimal.NewFromInt(30)).Ceil().IntPart()

		// maxMinute - duration - list.Offset
		//if list.Offset  lastDiffMinute{}
		lastDiffMinute = decimal.NewFromInt(maxMinute).Sub(decimal.NewFromInt(list.Duration)).IntPart()

		fmt.Println(haltHour, maxMinute, offsetHaltHour, "====", lastDiffMinute)
		//duration := list.Duration - list.Offset
		//halfHourPrice, _ := decimal.NewFromFloat(list.Price).Div(decimal.NewFromInt(2)).Float64()
		//totalPrice, _ := decimal.NewFromInt(duration).Mul(decimal.NewFromFloat(halfHourPrice)).Float64()
		//offsetTotalPrice, _ := decimal.NewFromInt(list.Offset).Mul(decimal.NewFromFloat(halfHourPrice)).Float64()
		//price += totalPrice
		//offsetPrice += offsetTotalPrice
	}
	price, _ = decimal.NewFromFloat(price).RoundFloor(2).Float64()
	offsetPrice, _ = decimal.NewFromFloat(offsetPrice).RoundFloor(2).Float64()
	return price, offsetPrice, periods, periodList
}

//func (l *OffsetTimeCharging) computeHalfHour(times []periodTimes) (float64, map[int64]float64, []*PeriodList) {
//	periods := make(map[int64]float64) // 时段费用详情
//	var price float64
//	var lastDiffMinute int64
//	periodList := make([]*PeriodList, 0)
//	for _, timeV := range times {
//		if lastDiffMinute > 0 {
//			timeV.StartTime = timeV.StartTime.Add(time.Duration(lastDiffMinute) * time.Minute)
//		}
//		var totalPrice float64
//		duration := timeV.EndTime.Sub(timeV.StartTime)
//		if duration.Minutes() > 0 {
//			haltHour := decimal.NewFromFloat(duration.Minutes()).Div(decimal.NewFromInt(30)).Ceil().IntPart()
//			maxMinute := decimal.NewFromInt(haltHour).Mul(decimal.NewFromInt(30)).IntPart()
//			lastDiffMinute = decimal.NewFromInt(maxMinute).Sub(decimal.NewFromFloat(duration.Minutes())).IntPart()
//
//			halfHourPrice, _ := decimal.NewFromFloat(timeV.Price).Div(decimal.NewFromInt(2)).Float64()
//			totalPrice, _ = decimal.NewFromFloat(halfHourPrice).Mul(decimal.NewFromInt(haltHour)).Float64()
//
//			price += totalPrice
//			periods[int64(timeV.Index)] += totalPrice
//		} else {
//			periods[int64(timeV.Index)] += 0
//		}
//		periodList = append(periodList, &PeriodList{
//			StartTime:  timeV.StartTime.Format("2006-01-02 15:04"),
//			EndTime:    timeV.EndTime.Format("2006-01-02 15:04"),
//			Index:      timeV.Index,
//			Duration:   decimal.NewFromFloat(duration.Minutes()).IntPart(),
//			Start:      timeV.Start,
//			End:        timeV.End,
//			Price:      timeV.Price,
//			TotalPrice: totalPrice,
//		})
//
//	}
//	price, _ = decimal.NewFromFloat(price).RoundFloor(2).Float64()
//	return price, periods, periodList
//}

// 按半小时计费开台不足半小时按半小时计费，超过半小时按分钟计费
func (l *OffsetTimeCharging) computeHalfHourOrMinute(times []periodTimes) (float64, map[int64]float64, []*PeriodList) {
	periods := make(map[int64]float64) // 时段费用详情
	var price float64
	var lastDiffMinute int64
	var firstHalfHour int64
	firstHalfHour = 30
	periodList := make([]*PeriodList, 0)
	for _, timeV := range times {
		if lastDiffMinute != 0 {
			timeV.StartTime = timeV.StartTime.Add(time.Duration(lastDiffMinute) * time.Minute)
		}

		var totalPrice float64
		duration := timeV.EndTime.Sub(timeV.StartTime)
		if duration.Minutes() > 0 {
			if firstHalfHour != 0 {
				haltHour := decimal.NewFromFloat(duration.Minutes()).Div(decimal.NewFromInt(30)).Ceil().IntPart()
				maxMinute := decimal.NewFromInt(haltHour).Mul(decimal.NewFromInt(30)).IntPart()
				lastDiffMinute = decimal.NewFromInt(maxMinute).Sub(decimal.NewFromFloat(duration.Minutes())).IntPart()
				halfHourPrice, _ := decimal.NewFromFloat(timeV.Price).Div(decimal.NewFromInt(2)).Float64()
				totalPrice, _ = decimal.NewFromFloat(halfHourPrice).Mul(decimal.NewFromInt(haltHour)).Float64()
				price += totalPrice
				periods[int64(timeV.Index)] += totalPrice
				firstHalfHour = 0 // 首个半小时计费，计费完后置为0
			} else {
				minutePrice, _ := decimal.NewFromFloat(timeV.Price).Div(decimal.NewFromInt(60)).Float64()
				totalPrice, _ = decimal.NewFromFloat(duration.Minutes()).Mul(decimal.NewFromFloat(minutePrice)).Float64()
				price += totalPrice
				periods[int64(timeV.Index)] += totalPrice
				lastDiffMinute = 0 // 分钟计费，差值分钟置为0
			}
		} else {
			periods[int64(timeV.Index)] += 0
		}
		periodList = append(periodList, &PeriodList{
			StartTime:  timeV.StartTime.Format("2006-01-02 15:04"),
			EndTime:    timeV.EndTime.Format("2006-01-02 15:04"),
			Index:      timeV.Index,
			Duration:   decimal.NewFromFloat(duration.Minutes()).IntPart(),
			Start:      timeV.Start,
			End:        timeV.End,
			Price:      timeV.Price,
			TotalPrice: totalPrice,
		})

	}
	price, _ = decimal.NewFromFloat(price).RoundFloor(2).Float64()
	return price, periods, periodList
}

// 一小时计费 (一小时为节点，以一小时起始点计算价格，如果时间段内计算时长小于一小时，则累计至下个时段，
// 并在下个时段内扣除上个时段少于的时间[因为以收一个时段价格]，然后在计算下周期时段价格，依次类推)
func (l *OffsetTimeCharging) computeHour(times []periodTimes) (float64, map[int64]float64, []*PeriodList) {
	periods := make(map[int64]float64) // 时段费用详情
	var price float64
	var lastDiffMinute int64
	periodList := make([]*PeriodList, 0)
	for _, timeV := range times {
		if lastDiffMinute > 0 {
			timeV.StartTime = timeV.StartTime.Add(time.Duration(lastDiffMinute) * time.Minute)
		}
		var totalPrice float64
		duration := timeV.EndTime.Sub(timeV.StartTime)
		if duration.Minutes() > 0 {
			hour := decimal.NewFromFloat(duration.Minutes()).Div(decimal.NewFromInt(60)).Ceil().IntPart()
			maxMinute := decimal.NewFromInt(hour).Mul(decimal.NewFromInt(60)).IntPart()
			lastDiffMinute = decimal.NewFromInt(maxMinute).Sub(decimal.NewFromFloat(duration.Minutes())).IntPart()
			totalPrice, _ = decimal.NewFromFloat(timeV.Price).Mul(decimal.NewFromInt(hour)).Float64()
			price += totalPrice
			periods[int64(timeV.Index)] += totalPrice
		} else {
			periods[int64(timeV.Index)] += 0
		}
		periodList = append(periodList, &PeriodList{
			StartTime:  timeV.StartTime.Format("2006-01-02 15:04"),
			EndTime:    timeV.EndTime.Format("2006-01-02 15:04"),
			Index:      timeV.Index,
			Duration:   decimal.NewFromFloat(duration.Minutes()).IntPart(),
			Start:      timeV.Start,
			End:        timeV.End,
			Price:      timeV.Price,
			TotalPrice: totalPrice,
		})
	}
	price, _ = decimal.NewFromFloat(price).RoundFloor(2).Float64()
	return price, periods, periodList
}

// 按小时计费开台不足1小时按小时计费，超过1小时按分钟计费
func (l *OffsetTimeCharging) computeHourOrMinute(times []periodTimes) (float64, map[int64]float64, []*PeriodList) {
	periods := make(map[int64]float64) // 时段费用详情
	var price float64
	var lastDiffMinute int64
	var firstHour int64
	firstHour = 60
	periodList := make([]*PeriodList, 0)
	for _, timeV := range times {
		if lastDiffMinute != 0 {
			timeV.StartTime = timeV.StartTime.Add(time.Duration(lastDiffMinute) * time.Minute)
		}

		var totalPrice float64
		duration := timeV.EndTime.Sub(timeV.StartTime)
		if duration.Minutes() > 0 {
			if firstHour != 0 {
				hour := decimal.NewFromFloat(duration.Minutes()).Div(decimal.NewFromInt(60)).Ceil().IntPart()
				maxMinute := decimal.NewFromInt(hour).Mul(decimal.NewFromInt(60)).IntPart()
				lastDiffMinute = decimal.NewFromInt(maxMinute).Sub(decimal.NewFromFloat(duration.Minutes())).IntPart()
				totalPrice, _ = decimal.NewFromFloat(timeV.Price).Mul(decimal.NewFromInt(hour)).Float64()
				price += totalPrice
				periods[int64(timeV.Index)] += totalPrice
				firstHour = 0 // 首个一小时计费，计费完后置为0
			} else {
				minutePrice, _ := decimal.NewFromFloat(timeV.Price).Div(decimal.NewFromInt(60)).Float64()
				totalPrice, _ = decimal.NewFromFloat(duration.Minutes()).Mul(decimal.NewFromFloat(minutePrice)).Float64()
				price += totalPrice
				periods[int64(timeV.Index)] += totalPrice
				lastDiffMinute = 0 // 分钟计费，差值分钟置为0
			}
		} else {
			periods[int64(timeV.Index)] += 0
		}
		periodList = append(periodList, &PeriodList{
			StartTime:  timeV.StartTime.Format("2006-01-02 15:04"),
			EndTime:    timeV.EndTime.Format("2006-01-02 15:04"),
			Index:      timeV.Index,
			Duration:   decimal.NewFromFloat(duration.Minutes()).IntPart(),
			Start:      timeV.Start,
			End:        timeV.End,
			Price:      timeV.Price,
			TotalPrice: totalPrice,
		})

	}
	price, _ = decimal.NewFromFloat(price).RoundFloor(2).Float64()
	return price, periods, periodList
}

// 以10分钟作为一个收费周期，第1分钟后开始计费
func (l *OffsetTimeCharging) computeCycleAndMinute(times []periodTimes) (float64, map[int64]float64, []*PeriodList) {
	periods := make(map[int64]float64) // 时段费用详情
	var price float64
	var lastDiffMinute int64
	periodList := make([]*PeriodList, 0)
	for _, timeV := range times {
		if lastDiffMinute != 0 {
			timeV.StartTime = timeV.StartTime.Add(time.Duration(lastDiffMinute) * time.Minute)
		}

		var totalPrice float64
		duration := timeV.EndTime.Sub(timeV.StartTime)
		if duration.Minutes() > 0 {
			// 半小时
			if l.cycleMinute == 30 {
				haltHour := decimal.NewFromFloat(duration.Minutes()).Div(decimal.NewFromInt(30)).Ceil().IntPart()
				maxMinute := decimal.NewFromInt(haltHour).Mul(decimal.NewFromInt(30)).IntPart()
				lastDiffMinute = decimal.NewFromInt(maxMinute).Sub(decimal.NewFromFloat(duration.Minutes())).IntPart()
				halfHourPrice, _ := decimal.NewFromFloat(timeV.Price).Div(decimal.NewFromInt(2)).Float64()
				totalPrice, _ = decimal.NewFromFloat(halfHourPrice).Mul(decimal.NewFromInt(haltHour)).Float64()
			}

			// 一小时
			if l.cycleMinute == 60 {
				hour := decimal.NewFromFloat(duration.Minutes()).Div(decimal.NewFromInt(60)).Ceil().IntPart()
				maxMinute := decimal.NewFromInt(hour).Mul(decimal.NewFromInt(60)).IntPart()
				lastDiffMinute = decimal.NewFromInt(maxMinute).Sub(decimal.NewFromFloat(duration.Minutes())).IntPart()
				totalPrice, _ = decimal.NewFromFloat(timeV.Price).Mul(decimal.NewFromInt(hour)).Float64()
			}
			// 周期计费
			if l.cycleMinute != 30 && l.cycleMinute != 60 {
				minutePrice, _ := decimal.NewFromFloat(timeV.Price).Div(decimal.NewFromInt(60)).Float64()
				cyclePrice, _ := decimal.NewFromFloat(minutePrice).Mul(decimal.NewFromInt(l.cycleMinute)).Float64()
				cycle := decimal.NewFromFloat(duration.Minutes()).Div(decimal.NewFromInt(l.cycleMinute)).Ceil().IntPart()
				maxMinute := decimal.NewFromInt(cycle).Mul(decimal.NewFromInt(l.cycleMinute)).IntPart()
				lastDiffMinute = decimal.NewFromInt(maxMinute).Sub(decimal.NewFromFloat(duration.Minutes())).IntPart()
				totalPrice, _ = decimal.NewFromFloat(cyclePrice).Mul(decimal.NewFromInt(cycle)).Float64()
			}
			price += totalPrice
			periods[int64(timeV.Index)] += totalPrice
		} else {
			periods[int64(timeV.Index)] += 0
		}
		periodList = append(periodList, &PeriodList{
			StartTime:  timeV.StartTime.Format("2006-01-02 15:04"),
			EndTime:    timeV.EndTime.Format("2006-01-02 15:04"),
			Index:      timeV.Index,
			Duration:   decimal.NewFromFloat(duration.Minutes()).IntPart(),
			Start:      timeV.Start,
			End:        timeV.End,
			Price:      timeV.Price,
			TotalPrice: totalPrice,
		})

	}
	price, _ = decimal.NewFromFloat(price).RoundFloor(2).Float64()
	return price, periods, periodList
}





